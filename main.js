'use strict';
const viewer = document.getElementById("md_viewer");
const edit_area = document.getElementById("md_edit_area");


edit_area.addEventListener("input", (e) => {
    gen_markdown_preview(viewer, edit_area.value)
});


function gen_markdown_preview(preview, inputText) {

    while(preview.firstChild){
        preview.removeChild(preview.firstChild);
    }
    const textQueue = new TextQueue(inputText);
    const tokenQueue= new Tokenizer(textQueue);
    const htmlTree = new ConvertHtmlTree(tokenQueue);
    const result = htmlTree.tokenToHtml()
    viewer.append(result);
    return;
}

const presetInputText = (
    "# このページについて\nご覧いただきありがとうございます。\n\nこちらは、独自に開発したマークダウンエディタのデモンストレーションページです。\n**マークダウンの解析処理に自作のパーサを使用しており**、一般的なマークダウンエディタには存在しないオリジナル記法を搭載していることが最大の特徴です。\n\n**後ほど解説する記法に沿って左枠内のテキストを編集すると、コチラの枠内のテキストがリアルタイムにスタイリングされます。**\nぜひ試しください。\n\n\n# マークダウンエディタを自作した背景\n趣味でPython・JavaScript・C言語の学習やそれらを用いたアプリケーション・ウェブサイトの作成を行う中で、プログラミング言語が動作する仕組みに興味を抱くようになりました。\n\nそこで「プラグラミング言語の仕組み」「アセンブラ入門」「コンパイラ自作」といった書籍やサイトを読み進めていたところ、\n　「***あれ、こうした技術を使えばマークダウンエディタを使う中で考えていた「こんな記法があったらいいのにな」を実現できるのでは？***」\nと思ったことがきっかけでマークダウンエディタの自作に着手し、作成したのがこのページです。\n\n# 機能の概要\n- **マークダウンの解析処理には既存のライブラリを使用せず、自作したパーサを採用しています。**\n- **従来のマークダウンエディタには存在しない、私が日々「あったら便利だな」と感じる独自の記法を実装しています。**（詳細は後述の「記法解説」をご参照ください）\n- 全ての処理をクライアントサイドで完結するよう設計しています。\n\n\n# 記法の解説（オリジナル記法）\nマークダウンエディタを作成する動機であったオリジナル記法から解説いたします。\n\n## オリジナル記法1：会話表現\n\n### 【解説】\n`===>`で囲んだ文字は、自分からの発言のような表現になります。\n`<===`囲んだ文字は、相手からの発言のような表現になります。\nLINEトークや生成AIのプロンプトをマークダウン上でも表現できたら良いと考え、実装しました。\n\n### 【使用例】\n\n===>自分\nこんにちは！今日はいい天気だね！\n野球観戦に行こう！\n===>\n\n\n<===相手\nこんにちは！\nいいね！ちょうどプロ野球観戦に行きたいと思っていたんだ！\n何時に集合する？\n<===\n\n## オリジナル記法2：折りたたみ\n\n### 【解説】\n`+++`で囲んだ文字は、折りたたみ（アコーディオン）になります。\n私は長い文章やブロックは折りたたみを使いたくなるのですが、どのマークダウンパーサでもHTMLタグを直接記述するしかなかったため、記法の一つとして取り込みたいと考えていました。\n\n### 【使用例】\n+++折りたたみブロックのタイトル\nこれは折りたたみブロックです。\nタイトルをクリックすることで閉じたり開いたりできます。\n+++\n\n\n## オリジナル記法3：ノート（メモ）ブロック\n\n### 【解説】\nノートやメモのブロックの記法を搭載しているマークダウンパーサはありますが、いずれも自分好みの記法ではなかったため、オリジナルで実装してみました。\n\n### 【使用例】\n:::tips>補足事項で使用するノートブロック\n`:::tips>`で囲ったブロックは、補足事項で使用するノートブロックになります。\nなお、他の記法でも同様ですが、ある記法の中に他の記法を入れることができます。\n以下、実例です。このノートブロックの中に、折りたたみブロックや会話表現ブロックが存在しています。\n\n+++折りたたみブロックのタイトル\nこれは折りたたみブロックです。\nタイトルをクリックすることで閉じたり開いたりできます。\n+++\n\n===>自分\nこんにちは！今日はいい天気だね！\n野球観戦に行こう！\n===>\n\n<===相手\nこんにちは！\nいいね！ちょうどプロ野球観戦に行きたいと思っていたんだ！\n何時に集合する？\n<===\n\n:::tips>\n\n:::important>重要事項で使用するノートブロック\n`:::important>`で囲ったブロックは、重要事項で使用するノートブロックになります。\n意味はないかもしれませんが、ノートブロックの中にノートブロックを入れ子にすることも可能です。\n以下、実例です。重要事項ブロックの中に補足事項ブロックが存在しています。\n\n:::tips>タイトル\n他の種類のノートを入れてみました！\n\n:::tips>\n\n:::important>\n\n:::caution>注意事項で使用するノートブロック\n`:::caution>`で囲ったブロックは、注意事項で使用するノートブロックになります。\n\n:::caution>\n\n現段階で実装済みのオリジナル記法は以上です。\n今後も自分が考える便利な記法を随時実装していく予定です。\n\n# 記法の解説（標準的な記法）\nここから先はマークダウンでは標準的な記法を列挙していきます。\n\n## 標準的な記法1：見出し\n\n### 【解説】\n`#`（※シャープの後には必ず半角スペースを入れる）から書き出すことで、見出しを作ることができます。\n見出しのレベルは6段階で、`#`の数で調整することができます。\n\n### 【使用例】\n# 見出し1（最大）\n## 見出し2\n### 見出し3\n#### 見出し4\n##### 見出し5\n###### 見出し6（最小）\n\n\n## 標準的な記法2：太字・斜体\n\n### 【解説】\n- `*`で囲んだ文字は斜体になります。\n- `**`で囲んだ文字は太字になります。\n- `***`で囲んだ文字は斜体+太字となります。\n\n### 【使用例】\n*斜体*\n**太字**\n***太字 + 斜体***\n\n\n## 標準的な記法3：引用\n\n### 【解説】\n`>`（※不等号の後には必ず半角スペースを入れる）から書き出すことで、引用を作ることができます。\n\n### 【使用例】\n> 引用です\n>>>>>> `>`を重ねることでネストができます。\n>>>> 引用終わり\n\n## 標準的な記法4：コードブロック\n\n### 【解説】\n単独のバッククォートで囲んだ文字はインラインコードになります。\n3つのバッククォートで囲んだ文字はコードブロックになります。\n\n### 【使用例】\nこれは`インラインコード`の使用例。\n\n```ブロックコードの使用例\nコードブロック1行目\nコードブロック2行目\n```\n\n## 標準的な記法5：取り消し線\n\n### 【解説】\n`~~`で囲んだ文字には、取り消し線が引かれます。\n\n### 【使用例】\nこれは~~取り消し~~です。\n\n\n## 標準的な記法6：リスト\n\n### 【解説】\n`-`（※ハイフンの後には必ず半角スペースを入れる）から書き出すことで、リストを作ることができます。\n\n### 【使用例】\n- リストです\n- - - - - リストはネスト可能です。\n- リスト終わり\n\n\n## 標準的な記法7：水平線\n\n### 【解説】\n`---`から書き出すことで、水平線を作ることができます。\n\n### 【使用例】\n---\n\n# おわりに\nお読みいただきありがとうございました。\nこのページは簡易的なデモンストレーションでしたが、今後も機能を追加することで本格的なマークダウンエディタを作成していきたいと考えています。\n\n\n\n"
)
edit_area.value = presetInputText;
gen_markdown_preview(viewer, presetInputText);

